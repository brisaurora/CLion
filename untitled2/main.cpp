#include#include#include#include #include #include #include #include void signalDeal(int sig,siginfo_t *info,void*t);int fg=0;int main(int argc,char* argv[]){    if(argc!=2){        printf("please input param\n");        return -1;    }    char writebuff[]="This is a test\n";    int count=0,seektemp=0,j=0;   int fd=open(argv[1],O_RDWR | O_CREAT,S_IRWXU);       //open a file   pid_t pid=fork();   if(pid==0)                            //child process   {        struct sigaction act;        act.sa_sigaction=signalDeal;        sigemptyset(&act.sa_mask);        act.sa_flags=SA_SIGINFO;        sigaction(SIGUSR1,&act,NULL);           while(1)       {        while(!fg);        fg=0;        if(count==0){                         //first write            int ret=write(fd,writebuff,strlen(writebuff));            if(ret==-1){                printf("write failed\n");            }            seektemp=lseek(fd,0,SEEK_CUR);            count++;        }        else{                                 //not first write            j=strlen(writebuff)*count;             //offset            seektemp=lseek(fd,j,SEEK_SET);            int ret=write(fd,writebuff,strlen(writebuff));            if(ret==-1){                printf("write failed\n");            }            count++;        }       }          }   else {                               //parent process                while(1)        {            sleep(1);            int ret=kill(pid,SIGUSR1);            if(ret==-1){                printf("send signal failed\n");            }            else{                printf("send signal success\n");            }        }           }}void signalDeal(int sig,siginfo_t *info,void*t){    if(sig==SIGUSR1)    {        fg=1;    }}